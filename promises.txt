promises:-
----------

-> a promise is an object that wraps an asynchronous operation and notifies when it's done.
-> this sounds similarly like a callback but the important thing lies in the usage of a promise.
-> promises provides a solution even though the code is wrong.
-> basically it was introduced to overcome the drawbacks of callback i.e callback hell.

ex:

let promise = new Promise(function(resolve, reject) {
  //executor that means a piece of code
});

-> as promise is an object it has some internal properties such as state which shows the status initially from pending to either "fulfilled" or "rejected".
-> it also has some other property such as result which gives a value which was initially undefined.
 
whenever a person finishes the job, he/she should call one of the functions listed below:

resolve(value)--indicates that the task is finished successfully. It sets the state to "fulfilled" and the result to some value which was not initialised before.
reject(error)---indicates the error if occurred. It sets the state to "rejected" and the result to error.

ex:

function readFile(filename, enc){
return new Promise(function(fulfill, reject){
    fs.readFile(filename, enc, function(err, res){
if (err) reject(err);
else fulfill(res);
    });});}

advantages:-
-----------
->error handling capability
->readability can be improved.
->provides catching mechanisms which are not applicable in callbacks.